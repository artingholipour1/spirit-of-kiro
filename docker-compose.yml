networks:
  # This special network is configured so that the local metadata
  # service can bind to the specific IP address that ECS uses
  # in production
  credentials_network:
    driver: bridge
    ipam:
      config:
        - subnet: "169.254.170.0/24"
          gateway: 169.254.170.1

services:
 # Storage for game data
 dynamodb-local:
   command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
   image: "amazon/dynamodb-local:latest"
   container_name: dynamodb-local
   ports:
     - "8000:8000"
   volumes:
     - "./docker/dynamodb:/home/dynamodblocal/data"
   working_dir: /home/dynamodblocal
   networks:
     - credentials_network

 # Hosts the backend WebSocket server 
 server:
   build:
     context: ./server
     dockerfile: Dockerfile
   container_name: server
   ports:
     - "8080:8080"
   depends_on:
     # We must wait for the DB to available
     dynamodb-local:
        condition: service_started

   environment:
     AWS_REGION: us-east-1
     DYNAMODB_ENDPOINT: http://dynamodb-local:8000
     # Fake AWS credentials for local development
     AWS_ACCESS_KEY_ID: "AKIAIOSFODNN7EXAMPLE"
     AWS_SECRET_ACCESS_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
     AWS_SESSION_TOKEN: "FakeSessionToken123456789"
   networks:
     - credentials_network
   develop:
     watch:
       - action: sync+restart
         path: ./server
         target: /app
         ignore:
           - node_modules/
       - action: rebuild
         path: package.json

 # Hosts the web server for the game client
 client:
   build:
     context: ./client
     dockerfile: Dockerfile
   container_name: client
   ports:
     - "5173:5173"
   depends_on:
     - server
   environment:
     VITE_API_URL: http://server:8080
   networks:
     - credentials_network
   develop:
     watch:
       - action: sync
         path: ./client
         target: /app
         ignore:
           - node_modules/
       - action: rebuild
         path: package.json