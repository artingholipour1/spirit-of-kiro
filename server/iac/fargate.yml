AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys the main game server to AWS Fargate, which manages game state, player interactions, and AI-driven gameplay. This service integrates with DynamoDB for game data persistence and Amazon Bedrock for AI-powered game mechanics, providing the core backend functionality for the AI Scrapyard game.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment (dev or prod)

  CpuArchitecture:
    Type: String
    Default: ARM64
    AllowedValues:
      - ARM64
      - X86_64
    Description: CPU architecture for the Fargate task

  ContainerImageUrl:
    Type: String
    Description: The URL of the container image to deploy

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the service will be deployed

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets where the service will be deployed

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets where the load balancer will be deployed

  ContainerPort:
    Type: Number
    Default: 8080
    Description: Port exposed by the container

  ContainerCpu:
    Type: Number
    Default: 1024
    Description: CPU units for the container (1024 = 1 vCPU)

  ContainerMemory:
    Type: Number
    Default: 2048
    Description: Memory for the container in MiB

  DesiredCount:
    Type: Number
    Default: 2
    Description: Number of task instances to run

  # DynamoDB table names from the DynamoDB stack
  ItemsTableName:
    Type: String
    Description: Name of the Items DynamoDB table

  InventoryTableName:
    Type: String
    Description: Name of the Inventory DynamoDB table

  LocationTableName:
    Type: String
    Description: Name of the Location DynamoDB table

  UsersTableName:
    Type: String
    Description: Name of the Users DynamoDB table

  UsernamesTableName:
    Type: String
    Description: Name of the Usernames DynamoDB table

  PersonaTableName:
    Type: String
    Description: Name of the Persona DynamoDB table

  # DynamoDB table ARNs from the DynamoDB stack
  ItemsTableArn:
    Type: String
    Description: ARN of the Items DynamoDB table

  InventoryTableArn:
    Type: String
    Description: ARN of the Inventory DynamoDB table

  LocationTableArn:
    Type: String
    Description: ARN of the Location DynamoDB table

  UsersTableArn:
    Type: String
    Description: ARN of the Users DynamoDB table

  UsernamesTableArn:
    Type: String
    Description: ARN of the Usernames DynamoDB table

  PersonaTableArn:
    Type: String
    Description: ARN of the Persona DynamoDB table

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 30

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Task Role (for application permissions)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-task-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:TransactWriteItems
                Resource:
                  - !Ref ItemsTableArn
                  - !Ref InventoryTableArn
                  - !Ref LocationTableArn
                  - !Ref UsersTableArn
                  - !Ref UsernamesTableArn
                  - !Ref PersonaTableArn
              # Bedrock permissions
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: "*"

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RuntimePlatform:
        OperatingSystemFamily: LINUX
        CpuArchitecture: !Ref CpuArchitecture
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-container"
          Image: !Ref ContainerImageUrl
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: DYNAMODB_TABLE_ITEMS
              Value: !Ref ItemsTableName
            - Name: DYNAMODB_TABLE_INVENTORY
              Value: !Ref InventoryTableName
            - Name: DYNAMODB_TABLE_LOCATION
              Value: !Ref LocationTableName
            - Name: DYNAMODB_TABLE_USERS
              Value: !Ref UsersTableName
            - Name: DYNAMODB_TABLE_USERNAMES
              Value: !Ref UsernamesTableName
            - Name: DYNAMODB_TABLE_PERSONA
              Value: !Ref PersonaTableName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # Security Group for ECS Tasks
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for server service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Security Group for ALB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for server load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-tg"
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # HTTP Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Service
  Service:
    Type: AWS::ECS::Service
    DependsOn: HTTPListener
    Properties:
      ServiceName: !Sub "${AWS::StackName}-service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref PublicSubnetIds
          SecurityGroups:
            - !Ref ServiceSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-container"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName

  ServiceName:
    Description: Name of the ECS service
    Value: !Ref Service

  ClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSCluster 